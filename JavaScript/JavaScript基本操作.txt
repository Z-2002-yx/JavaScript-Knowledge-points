js组成部分：
1、ECMAScript  简称 ES，js语法解释器  
2、BOM  浏览器对象
3、DOM  文档对象，HTML节点对象

----------------------------
js基础语法

1、直接写入    --写入script标签 <script></script>

2、引入script文件    <script src='js路径'></script>
-----------------------------------------------------------

-----------------------------------------
js输出方式

1、alert( ' 弹窗信息 ' )
2、console.log( " 打印数据 " )   输入到控制台中
3、confirm( ' 确定删除吗？ ' )  确认框
4、prompt( ' 输入内容 ' ) 接收输入框
5、document.write( ' 将信息写到body页面中 ' )  

-------------------------------
语句和表达式的区别

语句：js表示的一句完整的语句就是语句
表达式：没说完的话

-----------------------------
js标识符命名规范
1、不能使用内置变量名
2、不能以数字开头
3、包含 数字 字母 下划线，$符号
4、使用小驼峰命名法，顾名思义
--------------------------------
js注释
单行注释  // 注释内容
多行注释  /**  注释内容 **/

-----------------------------------------
定义变量
*先声明后定义
var  a;
a = 1;

*边声明边定义
var b = 1;

let         块级作用域，将作用域指定到 {} 中
const
-------------------------------------
变量命名规范
1、包含数字，字母，下划线
2、不能是内置变量名
3、使用小驼峰法

--------------------------------
变量的作用域
函数内部---局部作用域（***** 在函数内部 不使用var定义的变量是全局变量 ） 
函数外部---全局作用域

--------------------------
数据类型
1、数值型 number  (NaN非法操作  比如：45 / 0)
2、字符串型  string
3、布尔类型  boolean
4、空/未定义  null/undefuned
5、对象  object (python 中的字典)

--------------------------------
查看数据类型

typeof(变量名)

-------------------------------------
转换数据类型
1、字符串转数字类型
  --parseInt() 转整型
  --parseFloat()转浮点
  --Number()  转数字类型

2、数字转字符串类型
  --String(变量)
  --变量.toString(进制)

3、其他类型转布尔值
  --Boolean(变量)
4、NaN 非法操作判断isNaN 判断是否为非法数字

-------------------------------
运算符

1、算术运算符
  +  -  *  /  %  ++  --
  +法：如果两个因子有一个是字符串类型，则+法的效果是拼接
  剩余的四个算术运算符：如果两个因子某一个或全是字符串类型，则会将字符串强制转换成数值型，进行计算

2、逻辑运算符
  逻辑与&&   逻辑或 | |   逻辑非 ！
3、比较运算符V
>
<
>=
<=
==
!=
===  恒等于  值相等，并且类型也相等


三元运算符 , 相当于简约的if ，  else
  --表达式  ?  表达式成立时  : 表达式不成立时

----------------------------------
逻辑语句

1、if - else if - else


2、
swatch(表达式){
  case 值:
        break;
  default:
        break;
}
------------------------------
循环语句
for



while



do.....while

while和do····while的区别
--当条件不满足时，while直接停止循环，do······while至少多运行一次

-----------------------------------
函数
-----------------------------------

函数的定义    >可以重复利用的代码片段

1、普通函数定义方式 ( 先调用后定义不会报错 ) ：
	function 函数名( 参数 ){ 
			代码片段
			return  返回; 
		}
2、变量的方式（ 必须先定义后调用 ）：
	var 函数名  = function( 参数 ){
		代码片段
		return  返回; 
		}
3、实例化对象的方式：
	var 函数名 = new Function(函数内容);

--------------------------------
函数调用
--------------------------------
 ---函数名(  );

---------------------------
作用域链：本质就是函数中查找变量的方式，函数内部使用变量，线从函数本身查找，如果
找到直接使用变量，如果没找到去函数的上级查找，如果还没找到继续上级查找，最终找到
window顶层对象，如果顶层对象还没找到直接报错



------------------------
函数的参数    >为了让函数更灵活
------------------------
1、形参
  --声明函数时定义的参数就是形参，形参是局部变量
2、实参
  --调用函数时，传递的参数就是实参


-----------------------------
传递参数
-----------------------------
  ···号参数【扩展参数】
function 函数名 (...参数名){  }



------------------------------
函数自调用
------------------------------
用法：函数体用（）包住，在结尾加（）
( function 函数名 ( 参数 ){ 过程代码 } )( )


------------------------------
构造函数 和 this
------------------------------
定义：一个函数能过被new关键字实例化就是构造函数，构造函数的函数名首字母大写

this关键字就是自身，相当于python中的self



------------------------------
闭包
------------------------------
定义：一个函数想访问另一个函数的变量，借助于函数嵌套的方式


-----------------------------
数组
-----------------------------
创建数组：
1、实例化数组的方式
  --var arr = new Array();

2、简化实例化数组方式
  -- var arr = new Array(1,2,3,4,5,6,7);

3、简单明了的方式
  -- var arr = [1,2,4,5,6,6,7,8]


-----------------------------
循环遍历数组
var arr = new Array(1, 2, 3, 4, 5);
        for (var a = arr.length - 1; a >= 0; a--) {
            console.log(arr[a]);
        }

---------------
数组常见的方法
---------------
1、尾部添加元素  数组 . push(  );  返回值是数组修改后的长度，会改变原来的数组
2、尾部删除元素  数组 . pop(  );  会改变原来的数组内容

3、头部添加元素  数组 . unshift(  );
4、头部删除数据  数组 . shift(  );

5、拼接  数组 . join( ' 拼接的字符 ' );

6、逆置  数组 . reverse();

7、判断某个元素是否在数组中  
 数组 . indexof(); 找到返回下标，找不到返回 -1
 数组 . includes(); 返回布尔值

8、修改删除数组的内容    数组 . splice(start,length);

9、截取数组一部分  数组 . slice(start,end);    

10、数组排序  数组 . sort(function(a,b){return a-b;})  可以改变

11、数组拼接  数组1 . concat(数组2)

12、简单循环数组  数组 . forEach(function(item,index){})

13、数组去重  
  a、定义一个空数组
  b、循环原始数组添加到空数组中，添加的同时判断元素在新数组中是否存在
  c、includes判断如果是True，跳出循环


-------------------------
基本数据类型和复杂数据类型存储的差别

基本数据类型（深拷贝）   值和地址都存储在栈结构中
复杂数据类型（浅拷贝）   值存在堆结构中，地址存在栈结构中
